/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author parmod
 */
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import javax.swing.JFileChooser;
import java.awt.image.WritableRaster;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import java.awt.BufferCapabilities;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.Arrays;



public class Front extends javax.swing.JFrame {
   
     //BufferedImage originalImage;
     BufferedImage myimg;
     BufferedImage originalimage;
     BufferedImage currentimage;
     File f;

    /**
     * Creates new form Front
     */
    
    
    public Front() {
        initComponents();
        setVisible(true);
        image_label.setVisible(true);
        
                                            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        file_path = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        encryption = new javax.swing.JButton();
        decryption = new javax.swing.JButton();
        image_label = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        text_to_hide = new javax.swing.JTextField();
        secretkey_text = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jButton1.setText("Choose Image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        encryption.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        encryption.setText("Encryption");
        encryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionActionPerformed(evt);
            }
        });

        decryption.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        decryption.setText("Decryption");
        decryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptionActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel1.setText("Enter Text to hide");

        jLabel2.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel2.setText("Enter Key to Encrypt");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(image_label, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(text_to_hide, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(secretkey_text, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(decryption, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encryption, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(text_to_hide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(secretkey_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(encryption)
                        .addGap(18, 18, 18)
                        .addComponent(decryption)
                        .addContainerGap(235, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(image_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
     JFileChooser chooser =new JFileChooser();
     chooser.showOpenDialog(null);
     f=chooser.getSelectedFile();
     file_path.setText(f.getAbsolutePath());
     
    // 
     try{
     myimg=ImageIO.read(f);
     currentimage=myimg;
     //Calculating pixelsize of image
     printImageInfo(myimg);
     
     //Converting Image to suitable type
     
     myimg=convert(myimg);
     
     image_label.setBounds(0, 0, 400, 400);
     image_label.setIcon(new ImageIcon(f.getAbsolutePath()));
     
     }
     catch(Exception e)
     {}
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void encryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionActionPerformed
        // TODO add your handling code here:
        int offset=0;
        String text=text_to_hide.getText();
        byte image[]=getByteData(currentimage);
        byte payload[]=text.getBytes();
        byte len[]=bit_conversion(payload.length);
        
        String key=secretkey_text.getText();
        //byte payload1[]=key.getBytes();
                
                
       
                try  
                {
                    BufferedImage image1=add_text(currentimage,text,key);
                    //InputStream in = new ByteArrayInputStream(image);
                    //BufferedImage newsave = ImageIO.read(in);


                     //BufferedImage saveimage=userspace(image);
                    JFileChooser savechooser=new JFileChooser("saving file");
                    savechooser.showSaveDialog(null);
                    //savechooser.getSelectedFile();
                    //File file1=new File("/home/parmod/Pictures"+"newfile.png");
                    //file1.delete();
                    
                    ImageIO.write(image1,"png",savechooser.getSelectedFile());
                    System.out.println("data added and file saved");
                    

	        }

	        catch(Exception e)

	        {

	            JOptionPane.showMessageDialog(null,

	"Target File cannot hold message!", "Error",JOptionPane.ERROR_MESSAGE);

	        }        
       
        
        
    }//GEN-LAST:event_encryptionActionPerformed
  
      private BufferedImage add_text(BufferedImage image, String text,String key)

	    {

	        //convert all items to byte arrays: image, message, message length

	        byte img[]  = getByteData(image);

	        byte msg[] = text.getBytes();

	        byte len[]   = bit_conversion(msg.length);
                
                //Secret Message Encryption
                
                byte key1[]=key.getBytes();
                
                byte len1[]=bit_conversion(key1.length);
                

	        try

	        {

	            encode_text(img, len,  0); //0 first positiong
                    
                    encode_text(img,len1,32);
                    
                    encode_text(img,key1,64); //4 bytes of space for length: 4bytes*8bit = 32 bits

	            encode_text(img, msg,64+key1.length); //4 bytes of space for length: 4bytes*8bit = 32 bits

	        }

	        catch(Exception e)

	        {

	            JOptionPane.showMessageDialog(null,

	"Target File cannot hold message!", "Error",JOptionPane.ERROR_MESSAGE);

	        }

	        return image;

	    }
    private byte[] bit_conversion(int i)

	    {

	        //originally integers (ints) cast into bytes

	        //byte byte7 = (byte)((i & 0xFF00000000000000L) >>> 56);

	        //byte byte6 = (byte)((i & 0x00FF000000000000L) >>> 48);

	        //byte byte5 = (byte)((i & 0x0000FF0000000000L) >>> 40);

	        //byte byte4 = (byte)((i & 0x000000FF00000000L) >>> 32);

	         

	        //only using 4 bytes

	        byte byte3 = (byte)((i & 0xFF000000) >>> 24); //0

	        byte byte2 = (byte)((i & 0x00FF0000) >>> 16); //0

	        byte byte1 = (byte)((i & 0x0000FF00) >>> 8 ); //0

	        byte byte0 = (byte)((i & 0x000000FF)       );

	        //{0,0,0,byte0} is equivalent, since all shifts >=8 will be 0

	        return(new byte[]{byte3,byte2,byte1,byte0});

	    }
  private byte[] encode_text(byte[] image, byte[] addition, int offset)
{
	if(addition.length + offset > image.length)
	{
		throw new IllegalArgumentException("File not long enough!");
	}
	for(int i=0; i<addition.length; ++i)
 	{
		int add = addition[i];
		for(int bit=7; bit>=0; --bit, ++offset)
		{
	   	 	int b = (add >>> bit) & 1;
	   		 image[offset] = (byte)((image[offset] & 0xFE) | b );
		}
	}
        return image;
}

    private void decryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptionActionPerformed
                   
               
        
        byte[] image1=getByteData(currentimage);
        
         byte[] finalres=decode_text(image1);
         String str1=new String(finalres); 
         text_to_hide.setText(str1);
         System.out.println("Decrypted");
         


// TODO add your handling code here:
        
    }//GEN-LAST:event_decryptionActionPerformed

    /**
     * @param args the command line arguments
     */
    private boolean[] convertToBits(byte payload[])
    {
        boolean[] result=new boolean[8*payload.length];
        int offset=0;
         for (byte b: payload) {
            for (int i = 7; i >= 0; i--) {
                int singleBit = (b >> i) & 1;
                if (singleBit == 1) {
                    result[offset++] = true;
                } else {
                    result[offset++] = false;
                }
            }
        }
        
        
        
        return result;
    }
    private byte[] decode_text(byte[] image)
{
	int length1 = 0;
        int length2= 0;
        
        
	int offset =0;
        int offset1;
        
        //length of secret  message
	for(int i=0; i<32; ++i)
	{
		length1 = (length1 << 1) | (image[i] & 1);
	}
        
        //length of secret key
        for(int i=32; i<64; ++i)
	{
		length2 = (length2 << 1) | (image[i] & 1);
	}
        
        
        //finding secret key string
        offset1=64;
        
	byte[] result = new byte[length2];
	for(int b=0; b<result.length; ++b )
	{
		for(int i=0; i<8; ++i, ++offset1)
		{
			result[b] = (byte)((result[b] << 1) | (image[offset1] & 1));
		}
	}
        
        
        int offset3=64+result.length;
                
        //finding secret message
        byte[] secret_result = new byte[length1];
	for(int b=0; b<secret_result.length; ++b )
	{
		for(int i=0; i<8; ++i, ++offset3)
		{
			secret_result[b] = (byte)((secret_result[b] << 1) | (image[offset3] & 1));
		}
	}
        
        
        String key2=secretkey_text.getText();
        
        //byte[] k=key2.getBytes();
        //byte[] len4=bit_conversion(k.length);
        
        
        //String match=result.toString();
         String match=new String(result);
             System.out.println("length of secret message"+length1);
             System.out.println("length of secret key"+length2);
              System.out.println("secret key  ");
              System.out.println(Arrays.toString(result));
              System.out.write(result,0,length2);
              
              
            
        if(key2.equals(match))
        {
            System.out.println("Matched");
        }
        
        
	return secret_result;
        
}
    private void printImageInfo(BufferedImage myimg)
    {
        
        
    }
    private BufferedImage convert(BufferedImage myimg) {
       
        int newImageType=myimg.getType();
        
          if (newImageType == BufferedImage.TYPE_INT_RGB
                || newImageType == BufferedImage.TYPE_INT_BGR) {
            newImageType = BufferedImage.TYPE_3BYTE_BGR;
        } else if (newImageType == BufferedImage.TYPE_INT_ARGB ||
                newImageType == BufferedImage.TYPE_CUSTOM) {
            newImageType = BufferedImage.TYPE_4BYTE_ABGR;
        } else if (newImageType == BufferedImage.TYPE_INT_ARGB_PRE) {
            newImageType = BufferedImage.TYPE_4BYTE_ABGR_PRE;
        } else {
            // no need to convert original image
            return null;
        }
        
        BufferedImage newimage=new BufferedImage(myimg.getWidth(),myimg.getHeight(),newImageType);
        Graphics g=newimage.getGraphics();
        g.drawImage(myimg,0,0, null);
        g.dispose();
        
        return myimg;
    }
    private byte[] getByteData(BufferedImage userspaceimage)
    {
        WritableRaster raster=userspaceimage.getRaster();
        DataBufferByte buffer=(DataBufferByte)raster.getDataBuffer();
        return buffer.getData();
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Front.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Front().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decryption;
    private javax.swing.JButton encryption;
    private javax.swing.JTextField file_path;
    private javax.swing.JLabel image_label;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JTextField secretkey_text;
    private javax.swing.JTextField text_to_hide;
    // End of variables declaration//GEN-END:variables

   
}
